# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  locale: 'en'
  client_url: '%env(resolve:CLIENT_URL)%'
  mercure_secret_key: '%env(resolve:MERCURE_JWT_SECRET_KEY)%'
  env(MERCURE_PUBLISH_URL): ''
  env(MERCURE_JWT_SECRET): ''

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
      # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Entity,Migrations,Tests,DataFixtures}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  api.event.jwt_created_listener:
    class: App\EventListener\JWTCreatedListener
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

  api.event.authentication_success_listener:
    class: App\EventListener\AuthenticationSuccessListener
    arguments:
      - '@lexik_jwt_authentication.jws_provider.lcobucci'
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
